import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Match, Message } from '@/types/user';
import { mockUsers } from '@/mocks/users';

// Mock matches for development
const mockMatches: Match[] = [
  {
    id: 'match-1',
    userId: 'current-user',
    matchedUserId: '1',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), // 2 days ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago
      text: "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
      senderId: '1',
      read: false,
    },
  },
  {
    id: 'match-2',
    userId: 'current-user',
    matchedUserId: '2',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(), // 5 days ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago
      text: "–ú–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?",
      senderId: 'current-user',
      read: true,
    },
  },
  {
    id: 'match-3',
    userId: 'current-user',
    matchedUserId: '3',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 1).toISOString(), // 1 day ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
      text: "–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∏–ª—å–º!",
      senderId: '3',
      read: false,
    },
  },
  {
    id: 'match-4',
    userId: 'current-user',
    matchedUserId: '4',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(), // 5 hours ago
      text: "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
      senderId: 'current-user',
      read: true,
    },
  },
  {
    id: 'match-5',
    userId: 'current-user',
    matchedUserId: '5',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(), // 3 days ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(), // 10 minutes ago
      text: "–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! üòä",
      senderId: '5',
      read: false,
    },
  },
  {
    id: 'match-6',
    userId: 'current-user',
    matchedUserId: '6',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString(), // 10 days ago
    lastMessage: {
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(), // 12 hours ago
      text: "–ë—É–¥—É —Ç–∞–º –≤ 19:00",
      senderId: '6',
      read: true,
    },
  },
];

// Mock messages for development
const mockMessages: Record<string, Message[]> = {
  'match-1': [
    {
      id: 'msg-1-1',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–º–µ—Ç–∏–ª–∞, —á—Ç–æ —Ç–µ–±–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–¥–∏—Ç—å –≤ –ø–æ—Ö–æ–¥—ã. –ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –º–∞—Ä—à—Ä—É—Ç?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-2',
      matchId: 'match-1',
      senderId: 'current-user',
      receiverId: '1',
      content: "–ü—Ä–∏–≤–µ—Ç! –û–±–æ–∂–∞—é –≥–æ—Ä–Ω—ã–µ —Ç—Ä–æ–ø—ã –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≥–æ—Ä–æ–¥–∞. –¢—ã –±—ã–ª–∞ –Ω–∞ –û—Ä–ª–∏–Ω–æ–π –≤–µ—Ä—à–∏–Ω–µ?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 23).toISOString(), // 23 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-3',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–ï—â–µ –Ω–µ—Ç, –Ω–æ —Å–ª—ã—à–∞–ª–∞, —á—Ç–æ —Ç–∞–º –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –•–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å –≤–º–µ—Å—Ç–µ?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 22).toISOString(), // 22 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-4',
      matchId: 'match-1',
      senderId: 'current-user',
      receiverId: '1',
      content: "–ö–æ–Ω–µ—á–Ω–æ! –ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö? –ü–æ–≥–æ–¥–∞ –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –æ—Ç–ª–∏—á–Ω–æ–π.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 21).toISOString(), // 21 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-5',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–ó–≤—É—á–∏—Ç –∑–¥–æ—Ä–æ–≤–æ! –Ø —Å–≤–æ–±–æ–¥–Ω–∞ –≤ —Å—É–±–±–æ—Ç—É. –í–æ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 20).toISOString(), // 20 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-6',
      matchId: 'match-1',
      senderId: 'current-user',
      receiverId: '1',
      content: "–î–∞–≤–∞–π –≤ 9 —É—Ç—Ä–∞? –ú–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —É –Ω–∞—á–∞–ª–∞ —Ç—Ä–æ–ø—ã. –Ø –≤–æ–∑—å–º—É —Ç–µ—Ä–º–æ—Å —Å –∫–æ—Ñ–µ –∏ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 19).toISOString(), // 19 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-7',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–ò–¥–µ–∞–ª—å–Ω–æ! –Ø –ø—Ä–∏–Ω–µ—Å—É —Ñ—Ä—É–∫—Ç—ã –∏ –≤–æ–¥—É. –ù–µ –º–æ–≥—É –¥–æ–∂–¥–∞—Ç—å—Å—è –Ω–∞—à–µ–≥–æ –ø–æ—Ö–æ–¥–∞! üèîÔ∏è",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 18).toISOString(), // 18 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-8',
      matchId: 'match-1',
      senderId: 'current-user',
      receiverId: '1',
      content: "–Ø —Ç–æ–∂–µ! –≠—Ç–æ –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ. –ö—Å—Ç–∞—Ç–∏, —É —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 17).toISOString(), // 17 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-9',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–î–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –ø–∞—Ä–∞. –ê —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–µ –±–æ—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Ö–æ–¥–æ–≤?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(), // 3 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-10',
      matchId: 'match-1',
      senderId: 'current-user',
      receiverId: '1',
      content: "–î–∞, –Ω–µ–¥–∞–≤–Ω–æ –∫—É–ø–∏–ª –Ω–æ–≤—ã–µ. –û–Ω–∏ —É–∂–µ —Ä–∞–∑–Ω–æ—à–µ–Ω—ã –∏ –æ—á–µ–Ω—å —É–¥–æ–±–Ω—ã–µ.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2.5).toISOString(), // 2.5 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-1-11',
      matchId: 'match-1',
      senderId: '1',
      receiverId: 'current-user',
      content: "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago
      read: false,
      type: 'text',
    },
  ],
  'match-2': [
    {
      id: 'msg-2-1',
      matchId: 'match-2',
      senderId: '2',
      receiverId: 'current-user',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É, —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π. –ö–∞–∫–æ–π –∫–∞–º–µ—Ä–æ–π —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 48).toISOString(), // 2 days ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-2-2',
      matchId: 'match-2',
      senderId: 'current-user',
      receiverId: '2',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é Sony Alpha –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–≤–æ–∏—Ö —Å–Ω–∏–º–∫–æ–≤. –ê —Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—à—å?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 36).toISOString(), // 36 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-2-3',
      matchId: 'match-2',
      senderId: '2',
      receiverId: 'current-user',
      content: "–î–∞, –Ω–æ —è –±–æ–ª—å—à–µ –ª—é–±–∏—Ç–µ–ª—å —Å iPhone. –¢–≤–æ—è –≥–∞–ª–µ—Ä–µ—è –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ!",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 24 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-2-4',
      matchId: 'match-2',
      senderId: 'current-user',
      receiverId: '2',
      content: "–ú–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö? –ï—Å—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–æ–≤ —É –æ–∑–µ—Ä–∞.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 24 hours ago
      read: true,
      type: 'text',
    },
  ],
  'match-3': [
    {
      id: 'msg-3-1',
      matchId: 'match-3',
      senderId: '3',
      receiverId: 'current-user',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –π–æ–≥–µ. –¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–æ–≤–∞–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(), // 12 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-2',
      matchId: 'match-3',
      senderId: 'current-user',
      receiverId: '3',
      content: "–ü—Ä–∏–≤–µ—Ç! –î–∞, –Ω–æ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ. –•–æ—Ç–µ–ª –±—ã –Ω–∞—É—á–∏—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 11).toISOString(), // 11 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-3',
      matchId: 'match-3',
      senderId: '3',
      receiverId: 'current-user',
      content: "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å! –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Å—Å—ã–ª–∫—É.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 10).toISOString(), // 10 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-4',
      matchId: 'match-3',
      senderId: 'current-user',
      receiverId: '3',
      content: "–≠—Ç–æ –±—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ! –ö—Å—Ç–∞—Ç–∏, —è –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –æ –π–æ–≥–µ –≤ –ò–Ω–¥–∏–∏.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 9).toISOString(), // 9 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-5',
      matchId: 'match-3',
      senderId: '3',
      receiverId: 'current-user',
      content: "–û, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ? –Ø –æ–±–æ–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª–∫–∏ –æ –π–æ–≥–µ!",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 8).toISOString(), // 8 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-6',
      matchId: 'match-3',
      senderId: 'current-user',
      receiverId: '3',
      content: "–û–Ω –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–î—ã—Ö–∞–Ω–∏–µ'. –û—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ñ–∏–ª—å–º –æ –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 7).toISOString(), // 7 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-3-7',
      matchId: 'match-3',
      senderId: '3',
      receiverId: 'current-user',
      content: "–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∏–ª—å–º!",
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
      read: false,
      type: 'text',
    },
    {
      id: 'msg-3-8',
      matchId: 'match-3',
      senderId: '3',
      receiverId: 'current-user',
      content: "–ü–æ—Å–ª—É—à–∞–π –º–æ—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
      timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(), // 20 minutes ago
      read: false,
      type: 'voice',
      duration: 45,
      mediaUrl: "https://example.com/meditation.mp3"
    },
  ],
  'match-5': [
    {
      id: 'msg-5-1',
      matchId: 'match-5',
      senderId: '5',
      receiverId: 'current-user',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –∫—É—Ä–∞—Ç–æ—Ä —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏. –ö–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 5).toISOString(), // 5 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-2',
      matchId: 'match-5',
      senderId: 'current-user',
      receiverId: '5',
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–ª—é –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –ê —Ç—ã?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(), // 4 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-3',
      matchId: 'match-5',
      senderId: '5',
      receiverId: 'current-user',
      content: "–Ø –æ–±–æ–∂–∞—é –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º! –í –Ω–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—ã—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç –º–æ–ª–æ–¥—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(), // 3 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-4',
      matchId: 'match-5',
      senderId: 'current-user',
      receiverId: '5',
      content: "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Å–µ—Ç–∏–ª —ç—Ç—É –≤—ã—Å—Ç–∞–≤–∫—É. –ö–æ–≥–¥–∞ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞?",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-5',
      matchId: 'match-5',
      senderId: '5',
      receiverId: 'current-user',
      content: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10 –¥–æ 20. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è.",
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 1).toISOString(), // 1 hour ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-6',
      matchId: 'match-5',
      senderId: 'current-user',
      receiverId: '5',
      content: "–í–∞—É, —ç—Ç–æ –±—ã–ª–æ –±—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –Ø —Å–≤–æ–±–æ–¥–µ–Ω –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤–µ—á–µ—Ä–æ–º.",
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
      read: true,
      type: 'text',
    },
    {
      id: 'msg-5-7',
      matchId: 'match-5',
      senderId: '5',
      receiverId: 'current-user',
      content: "–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! üòä",
      timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(), // 10 minutes ago
      read: false,
      type: 'text',
    },
    {
      id: 'msg-5-8',
      matchId: 'match-5',
      senderId: '5',
      receiverId: 'current-user',
      content: "–í–æ—Ç –æ–¥–Ω–∞ –∏–∑ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ",
      timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago
      read: false,
      type: 'image',
      mediaUrl: "https://images.unsplash.com/photo-1579783902614-a3fb3927b6a5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YWJzdHJhY3QlMjBhcnR8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"
    },
  ],
};

interface MatchesState {
  matches: Match[];
  messages: Record<string, Message[]>;
  newMatchId: string | null;
  unreadCounts: Record<string, number>;
  actions: {
    addMatch: (match: Match) => void;
    removeMatch: (matchId: string) => void;
    updateMatch: (matchId: string, updates: Partial<Match>) => void;
    setNewMatchId: (matchId: string | null) => void;
    addMessage: (matchId: string, message: Message) => void;
    markMessagesAsRead: (matchId: string) => void;
    getUnreadCount: (matchId: string) => number;
    getTotalUnreadCount: () => number;
  };
}

export const useMatchesStore = create<MatchesState>()(
  persist(
    (set, get) => ({
      matches: mockMatches,
      messages: mockMessages,
      newMatchId: null,
      unreadCounts: {
        'match-1': 1,
        'match-3': 2, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        'match-5': 2, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      },
      actions: {
        addMatch: (match: Match) => {
          set((state) => ({
            matches: [match, ...state.matches],
            newMatchId: match.id,
          }));
        },
        removeMatch: (matchId: string) => {
          set((state) => ({
            matches: state.matches.filter((match) => match.id !== matchId),
            messages: Object.fromEntries(
              Object.entries(state.messages).filter(([key]) => key !== matchId)
            ),
          }));
        },
        updateMatch: (matchId: string, updates: Partial<Match>) => {
          set((state) => ({
            matches: state.matches.map((match) =>
              match.id === matchId ? { ...match, ...updates } : match
            ),
          }));
        },
        setNewMatchId: (matchId: string | null) => {
          set({ newMatchId: matchId });
        },
        addMessage: (matchId: string, message: Message) => {
          set((state) => {
            // Update messages
            const existingMessages = state.messages[matchId] || [];
            const updatedMessages = {
              ...state.messages,
              [matchId]: [...existingMessages, message],
            };
            
            // Update unread counts if the message is from the other user
            const unreadCounts = { ...state.unreadCounts };
            if (message.senderId !== 'current-user' && !message.read) {
              unreadCounts[matchId] = (unreadCounts[matchId] || 0) + 1;
            }
            
            // Update match with last message
            const updatedMatches = state.matches.map((match) => {
              if (match.id === matchId) {
                return {
                  ...match,
                  lastMessage: {
                    timestamp: message.timestamp,
                    text: message.content,
                    senderId: message.senderId,
                    read: message.read,
                  },
                };
              }
              return match;
            });
            
            return {
              messages: updatedMessages,
              matches: updatedMatches,
              unreadCounts,
            };
          });
        },
        markMessagesAsRead: (matchId: string) => {
          set((state) => {
            // Mark all messages in the match as read
            const matchMessages = state.messages[matchId] || [];
            const updatedMessages = matchMessages.map((msg) => ({
              ...msg,
              read: true,
            }));
            
            // Reset unread count for this match
            const unreadCounts = { ...state.unreadCounts };
            unreadCounts[matchId] = 0;
            
            // Update last message read status if it exists
            const updatedMatches = state.matches.map((match) => {
              if (match.id === matchId && match.lastMessage) {
                return {
                  ...match,
                  lastMessage: {
                    ...match.lastMessage,
                    read: true,
                  },
                };
              }
              return match;
            });
            
            return {
              messages: {
                ...state.messages,
                [matchId]: updatedMessages,
              },
              matches: updatedMatches,
              unreadCounts,
            };
          });
        },
        getUnreadCount: (matchId: string) => {
          return get().unreadCounts[matchId] || 0;
        },
        getTotalUnreadCount: () => {
          const counts = get().unreadCounts;
          return Object.values(counts).reduce((total, count) => total + count, 0);
        },
      },
    }),
    {
      name: 'matches-storage',
      storage: createJSONStorage(() => AsyncStorage),
      partialize: (state) => ({
        matches: state.matches,
        messages: state.messages,
        unreadCounts: state.unreadCounts,
      }),
    }
  )
);